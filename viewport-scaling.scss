/**
 * Strip the numeric units from `$value`.
 *
 * @param {Number} $value
 * @return {String}
 */
@function strip_numeric_units($value) {
	// Check this a valid value and not already unitless
	@if type-of($value) == "number" and not unitless($value) {
		@return $value / ($value * 0 + 1);
	}
	@return $value;
}


/**
 * Viewport scaling mixin.
 *
 * @param {String} $property Name of the property to scale e.g. `font-size`
 * @param {Number} $min-value Minimum property value e.g. `16px`
 * @param {Number} $max-value Maximum property value e.g. `72px`
 * @param {Number} $bp-floor Floor breakpoint value e.g. `480px`
 * @param {Number} $bp-ceiling Ceiling breakpoint value e.g. `960px`
 * @param {String} $v-unit Viewport unit to scale by e.g. `vw`
 * @param {String} $mq-prop Media query property to determine scaling by e.g. `min-width`
 * @return {String} Sass
 */
@mixin viewport-scaling($property, $min-value, $max-value, $bp-floor, $bp-ceiling, $v-unit, $mq-prop) {

	// Calculate the gradient
	$m: (strip_numeric_units($max-value) - strip_numeric_units($min-value)) / (strip_numeric_units($bp-ceiling) - strip_numeric_units($bp-floor));

	// Calculate the offset from the floor
	$c: #{$min-value - $m * $bp-floor};

	// Get `mx` for the linear curve equation (`y = mx + c`)
	$mx: #{$m * 100}$v-unit;

	// Sass
	#{$property}: #{$min-value};
	@media all and ($mq-prop: #{$bp-floor}) {
		#{$property}: calc(#{$mx} + #{$c});
	}
	@media all and ($mq-prop: #{$bp-ceiling}) {
		#{$property}: #{$max-value};
	}
	
}